// Generated from ./src/lang/Sml.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class SmlLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly VAL = 3;
	public static readonly LET = 4;
	public static readonly LOCAL = 5;
	public static readonly IN = 6;
	public static readonly END = 7;
	public static readonly FUN = 8;
	public static readonly FN = 9;
	public static readonly DOUBLE_ARROW = 10;
	public static readonly REC = 11;
	public static readonly IF = 12;
	public static readonly THEN = 13;
	public static readonly ELSE = 14;
	public static readonly CASE = 15;
	public static readonly OF = 16;
	public static readonly NEXT_PATTERN = 17;
	public static readonly ASSIGN = 18;
	public static readonly L_CURLY = 19;
	public static readonly R_CURLY = 20;
	public static readonly L_BRACKET = 21;
	public static readonly R_BRACKET = 22;
	public static readonly COMMA = 23;
	public static readonly SEMI = 24;
	public static readonly COLON = 25;
	public static readonly DOT = 26;
	public static readonly EQUALS = 27;
	public static readonly NOT_EQUALS = 28;
	public static readonly LESS = 29;
	public static readonly LESS_OR_EQUALS = 30;
	public static readonly GREATER = 31;
	public static readonly GREATER_OR_EQUALS = 32;
	public static readonly INT_NEGATE = 33;
	public static readonly REAL_NEGATE = 34;
	public static readonly NOT = 35;
	public static readonly INT_MUL = 36;
	public static readonly INT_DIV = 37;
	public static readonly INT_ADD = 38;
	public static readonly INT_SUB = 39;
	public static readonly REAL_MUL = 40;
	public static readonly REAL_DIV = 41;
	public static readonly REAL_ADD = 42;
	public static readonly REAL_SUB = 43;
	public static readonly STRING_CONCAT = 44;
	public static readonly AND = 45;
	public static readonly OR = 46;
	public static readonly INT = 47;
	public static readonly REAL = 48;
	public static readonly BOOL = 49;
	public static readonly UNIT = 50;
	public static readonly CHAR = 51;
	public static readonly STRING = 52;
	public static readonly LIST_NIL = 53;
	public static readonly LIST_CONSTRUCT = 54;
	public static readonly LIST_CONCAT = 55;
	public static readonly IDENTIFIER = 56;
	public static readonly WHITESPACE = 57;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "VAL", "LET", "LOCAL", "IN", "END", "FUN", "FN", "DOUBLE_ARROW", 
		"REC", "IF", "THEN", "ELSE", "CASE", "OF", "NEXT_PATTERN", "ASSIGN", "L_CURLY", 
		"R_CURLY", "L_BRACKET", "R_BRACKET", "COMMA", "SEMI", "COLON", "DOT", 
		"EQUALS", "NOT_EQUALS", "LESS", "LESS_OR_EQUALS", "GREATER", "GREATER_OR_EQUALS", 
		"INT_NEGATE", "REAL_NEGATE", "NOT", "INT_MUL", "INT_DIV", "INT_ADD", "INT_SUB", 
		"REAL_MUL", "REAL_DIV", "REAL_ADD", "REAL_SUB", "STRING_CONCAT", "AND", 
		"OR", "INT", "REAL", "BOOL", "UNIT", "CHAR", "STRING", "LIST_NIL", "LIST_CONSTRUCT", 
		"LIST_CONCAT", "IDENTIFIER", "WHITESPACE",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'('", "')'", "'val'", "'let'", "'local'", "'in'", "'end'", 
		"'fun'", "'fn'", "'=>'", "'rec'", "'if'", "'then'", "'else'", "'case'", 
		"'of'", "'|'", "'='", "'{'", "'}'", "'['", "']'", "','", "';'", "':'", 
		"'.'", "'=='", "'<>'", "'<'", "'<='", "'>'", "'>='", "'~'", "'~.'", "'not'", 
		"'*'", "'div'", "'+'", "'-'", "'*.'", "'/'", "'+.'", "'-.'", "'^'", "'andalso'", 
		"'orelse'", undefined, undefined, undefined, "'()'", undefined, undefined, 
		"'nil'", "'::'", "'@'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "VAL", "LET", "LOCAL", "IN", "END", "FUN", 
		"FN", "DOUBLE_ARROW", "REC", "IF", "THEN", "ELSE", "CASE", "OF", "NEXT_PATTERN", 
		"ASSIGN", "L_CURLY", "R_CURLY", "L_BRACKET", "R_BRACKET", "COMMA", "SEMI", 
		"COLON", "DOT", "EQUALS", "NOT_EQUALS", "LESS", "LESS_OR_EQUALS", "GREATER", 
		"GREATER_OR_EQUALS", "INT_NEGATE", "REAL_NEGATE", "NOT", "INT_MUL", "INT_DIV", 
		"INT_ADD", "INT_SUB", "REAL_MUL", "REAL_DIV", "REAL_ADD", "REAL_SUB", 
		"STRING_CONCAT", "AND", "OR", "INT", "REAL", "BOOL", "UNIT", "CHAR", "STRING", 
		"LIST_NIL", "LIST_CONSTRUCT", "LIST_CONCAT", "IDENTIFIER", "WHITESPACE",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(SmlLexer._LITERAL_NAMES, SmlLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return SmlLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(SmlLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Sml.g4"; }

	// @Override
	public get ruleNames(): string[] { return SmlLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return SmlLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return SmlLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return SmlLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02;\u0148\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x03\x02\x03\x02\x03" +
		"\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03" +
		"\x07\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n" +
		"\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\x0E\x03" +
		"\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03" +
		"\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x12\x03" +
		"\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03" +
		"\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03" +
		"\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03" +
		"\x1F\x03\x1F\x03\x1F\x03 \x03 \x03!\x03!\x03!\x03\"\x03\"\x03#\x03#\x03" +
		"#\x03$\x03$\x03$\x03$\x03%\x03%\x03&\x03&\x03&\x03&\x03\'\x03\'\x03(\x03" +
		"(\x03)\x03)\x03)\x03*\x03*\x03+\x03+\x03+\x03,\x03,\x03,\x03-\x03-\x03" +
		".\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03/\x03/\x03/\x03/\x03/\x03/\x03" +
		"/\x030\x060\u0106\n0\r0\x0E0\u0107\x031\x061\u010B\n1\r1\x0E1\u010C\x03" +
		"1\x031\x061\u0111\n1\r1\x0E1\u0112\x032\x032\x032\x032\x032\x032\x032" +
		"\x032\x032\x052\u011E\n2\x033\x033\x033\x034\x034\x034\x034\x034\x034" +
		"\x035\x035\x075\u012B\n5\f5\x0E5\u012E\v5\x035\x035\x036\x036\x036\x03" +
		"6\x037\x037\x037\x038\x038\x039\x039\x079\u013D\n9\f9\x0E9\u0140\v9\x03" +
		":\x06:\u0143\n:\r:\x0E:\u0144\x03:\x03:\x02\x02\x02;\x03\x02\x03\x05\x02" +
		"\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02" +
		"\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11" +
		"!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02" +
		"\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02" +
		"!A\x02\"C\x02#E\x02$G\x02%I\x02&K\x02\'M\x02(O\x02)Q\x02*S\x02+U\x02," +
		"W\x02-Y\x02.[\x02/]\x020_\x021a\x022c\x023e\x024g\x025i\x026k\x027m\x02" +
		"8o\x029q\x02:s\x02;\x03\x02\x07\x03\x022;\x03\x02$$\x04\x02aac|\x07\x02" +
		"))2;C\\aac|\x05\x02\v\f\x0F\x0F\"\"\x02\u014E\x02\x03\x03\x02\x02\x02" +
		"\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02" +
		"\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02" +
		"\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02" +
		"\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02" +
		"\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02" +
		"#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03" +
		"\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02" +
		"\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x02" +
		"7\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02" +
		"\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02" +
		"\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03" +
		"\x02\x02\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x02Q\x03\x02\x02" +
		"\x02\x02S\x03\x02\x02\x02\x02U\x03\x02\x02\x02\x02W\x03\x02\x02\x02\x02" +
		"Y\x03\x02\x02\x02\x02[\x03\x02\x02\x02\x02]\x03\x02\x02\x02\x02_\x03\x02" +
		"\x02\x02\x02a\x03\x02\x02\x02\x02c\x03\x02\x02\x02\x02e\x03\x02\x02\x02" +
		"\x02g\x03\x02\x02\x02\x02i\x03\x02\x02\x02\x02k\x03\x02\x02\x02\x02m\x03" +
		"\x02\x02\x02\x02o\x03\x02\x02\x02\x02q\x03\x02\x02\x02\x02s\x03\x02\x02" +
		"\x02\x03u\x03\x02\x02\x02\x05w\x03\x02\x02\x02\x07y\x03\x02\x02\x02\t" +
		"}\x03\x02\x02\x02\v\x81\x03\x02\x02\x02\r\x87\x03\x02\x02\x02\x0F\x8A" +
		"\x03\x02\x02\x02\x11\x8E\x03\x02\x02\x02\x13\x92\x03\x02\x02\x02\x15\x95" +
		"\x03\x02\x02\x02\x17\x98\x03\x02\x02\x02\x19\x9C\x03\x02\x02\x02\x1B\x9F" +
		"\x03\x02\x02\x02\x1D\xA4\x03\x02\x02\x02\x1F\xA9\x03\x02\x02\x02!\xAE" +
		"\x03\x02\x02\x02#\xB1\x03\x02\x02\x02%\xB3\x03\x02\x02\x02\'\xB5\x03\x02" +
		"\x02\x02)\xB7\x03\x02\x02\x02+\xB9\x03\x02\x02\x02-\xBB\x03\x02\x02\x02" +
		"/\xBD\x03\x02\x02\x021\xBF\x03\x02\x02\x023\xC1\x03\x02\x02\x025\xC3\x03" +
		"\x02\x02\x027\xC5\x03\x02\x02\x029\xC8\x03\x02\x02\x02;\xCB\x03\x02\x02" +
		"\x02=\xCD\x03\x02\x02\x02?\xD0\x03\x02\x02\x02A\xD2\x03\x02\x02\x02C\xD5" +
		"\x03\x02\x02\x02E\xD7\x03\x02\x02\x02G\xDA\x03\x02\x02\x02I\xDE\x03\x02" +
		"\x02\x02K\xE0\x03\x02\x02\x02M\xE4\x03\x02\x02\x02O\xE6\x03\x02\x02\x02" +
		"Q\xE8\x03\x02\x02\x02S\xEB\x03\x02\x02\x02U\xED\x03\x02\x02\x02W\xF0\x03" +
		"\x02\x02\x02Y\xF3\x03\x02\x02\x02[\xF5\x03\x02\x02\x02]\xFD\x03\x02\x02" +
		"\x02_\u0105\x03\x02\x02\x02a\u010A\x03\x02\x02\x02c\u011D\x03\x02\x02" +
		"\x02e\u011F\x03\x02\x02\x02g\u0122\x03\x02\x02\x02i\u0128\x03\x02\x02" +
		"\x02k\u0131\x03\x02\x02\x02m\u0135\x03\x02\x02\x02o\u0138\x03\x02\x02" +
		"\x02q\u013A\x03\x02\x02\x02s\u0142\x03\x02\x02\x02uv\x07*\x02\x02v\x04" +
		"\x03\x02\x02\x02wx\x07+\x02\x02x\x06\x03\x02\x02\x02yz\x07x\x02\x02z{" +
		"\x07c\x02\x02{|\x07n\x02\x02|\b\x03\x02\x02\x02}~\x07n\x02\x02~\x7F\x07" +
		"g\x02\x02\x7F\x80\x07v\x02\x02\x80\n\x03\x02\x02\x02\x81\x82\x07n\x02" +
		"\x02\x82\x83\x07q\x02\x02\x83\x84\x07e\x02\x02\x84\x85\x07c\x02\x02\x85" +
		"\x86\x07n\x02\x02\x86\f\x03\x02\x02\x02\x87\x88\x07k\x02\x02\x88\x89\x07" +
		"p\x02\x02\x89\x0E\x03\x02\x02\x02\x8A\x8B\x07g\x02\x02\x8B\x8C\x07p\x02" +
		"\x02\x8C\x8D\x07f\x02\x02\x8D\x10\x03\x02\x02\x02\x8E\x8F\x07h\x02\x02" +
		"\x8F\x90\x07w\x02\x02\x90\x91\x07p\x02\x02\x91\x12\x03\x02\x02\x02\x92" +
		"\x93\x07h\x02\x02\x93\x94\x07p\x02\x02\x94\x14\x03\x02\x02\x02\x95\x96" +
		"\x07?\x02\x02\x96\x97\x07@\x02\x02\x97\x16\x03\x02\x02\x02\x98\x99\x07" +
		"t\x02\x02\x99\x9A\x07g\x02\x02\x9A\x9B\x07e\x02\x02\x9B\x18\x03\x02\x02" +
		"\x02\x9C\x9D\x07k\x02\x02\x9D\x9E\x07h\x02\x02\x9E\x1A\x03\x02\x02\x02" +
		"\x9F\xA0\x07v\x02\x02\xA0\xA1\x07j\x02\x02\xA1\xA2\x07g\x02\x02\xA2\xA3" +
		"\x07p\x02\x02\xA3\x1C\x03\x02\x02\x02\xA4\xA5\x07g\x02\x02\xA5\xA6\x07" +
		"n\x02\x02\xA6\xA7\x07u\x02\x02\xA7\xA8\x07g\x02\x02\xA8\x1E\x03\x02\x02" +
		"\x02\xA9\xAA\x07e\x02\x02\xAA\xAB\x07c\x02\x02\xAB\xAC\x07u\x02\x02\xAC" +
		"\xAD\x07g\x02\x02\xAD \x03\x02\x02\x02\xAE\xAF\x07q\x02\x02\xAF\xB0\x07" +
		"h\x02\x02\xB0\"\x03\x02\x02\x02\xB1\xB2\x07~\x02\x02\xB2$\x03\x02\x02" +
		"\x02\xB3\xB4\x07?\x02\x02\xB4&\x03\x02\x02\x02\xB5\xB6\x07}\x02\x02\xB6" +
		"(\x03\x02\x02\x02\xB7\xB8\x07\x7F\x02\x02\xB8*\x03\x02\x02\x02\xB9\xBA" +
		"\x07]\x02\x02\xBA,\x03\x02\x02\x02\xBB\xBC\x07_\x02\x02\xBC.\x03\x02\x02" +
		"\x02\xBD\xBE\x07.\x02\x02\xBE0\x03\x02\x02\x02\xBF\xC0\x07=\x02\x02\xC0" +
		"2\x03\x02\x02\x02\xC1\xC2\x07<\x02\x02\xC24\x03\x02\x02\x02\xC3\xC4\x07" +
		"0\x02\x02\xC46\x03\x02\x02\x02\xC5\xC6\x07?\x02\x02\xC6\xC7\x07?\x02\x02" +
		"\xC78\x03\x02\x02\x02\xC8\xC9\x07>\x02\x02\xC9\xCA\x07@\x02\x02\xCA:\x03" +
		"\x02\x02\x02\xCB\xCC\x07>\x02\x02\xCC<\x03\x02\x02\x02\xCD\xCE\x07>\x02" +
		"\x02\xCE\xCF\x07?\x02\x02\xCF>\x03\x02\x02\x02\xD0\xD1\x07@\x02\x02\xD1" +
		"@\x03\x02\x02\x02\xD2\xD3\x07@\x02\x02\xD3\xD4\x07?\x02\x02\xD4B\x03\x02" +
		"\x02\x02\xD5\xD6\x07\x80\x02\x02\xD6D\x03\x02\x02\x02\xD7\xD8\x07\x80" +
		"\x02\x02\xD8\xD9\x070\x02\x02\xD9F\x03\x02\x02\x02\xDA\xDB\x07p\x02\x02" +
		"\xDB\xDC\x07q\x02\x02\xDC\xDD\x07v\x02\x02\xDDH\x03\x02\x02\x02\xDE\xDF" +
		"\x07,\x02\x02\xDFJ\x03\x02\x02\x02\xE0\xE1\x07f\x02\x02\xE1\xE2\x07k\x02" +
		"\x02\xE2\xE3\x07x\x02\x02\xE3L\x03\x02\x02\x02\xE4\xE5\x07-\x02\x02\xE5" +
		"N\x03\x02\x02\x02\xE6\xE7\x07/\x02\x02\xE7P\x03\x02\x02\x02\xE8\xE9\x07" +
		",\x02\x02\xE9\xEA\x070\x02\x02\xEAR\x03\x02\x02\x02\xEB\xEC\x071\x02\x02" +
		"\xECT\x03\x02\x02\x02\xED\xEE\x07-\x02\x02\xEE\xEF\x070\x02\x02\xEFV\x03" +
		"\x02\x02\x02\xF0\xF1\x07/\x02\x02\xF1\xF2\x070\x02\x02\xF2X\x03\x02\x02" +
		"\x02\xF3\xF4\x07`\x02\x02\xF4Z\x03\x02\x02\x02\xF5\xF6\x07c\x02\x02\xF6" +
		"\xF7\x07p\x02\x02\xF7\xF8\x07f\x02\x02\xF8\xF9\x07c\x02\x02\xF9\xFA\x07" +
		"n\x02\x02\xFA\xFB\x07u\x02\x02\xFB\xFC\x07q\x02\x02\xFC\\\x03\x02\x02" +
		"\x02\xFD\xFE\x07q\x02\x02\xFE\xFF\x07t\x02\x02\xFF\u0100\x07g\x02\x02" +
		"\u0100\u0101\x07n\x02\x02\u0101\u0102\x07u\x02\x02\u0102\u0103\x07g\x02" +
		"\x02\u0103^\x03\x02\x02\x02\u0104\u0106\t\x02\x02\x02\u0105\u0104\x03" +
		"\x02\x02\x02\u0106\u0107\x03\x02\x02\x02\u0107\u0105\x03\x02\x02\x02\u0107" +
		"\u0108\x03\x02\x02\x02\u0108`\x03\x02\x02\x02\u0109\u010B\x05_0\x02\u010A" +
		"\u0109\x03\x02\x02\x02\u010B\u010C\x03\x02\x02\x02\u010C\u010A\x03\x02" +
		"\x02\x02\u010C\u010D\x03\x02\x02\x02\u010D\u010E\x03\x02\x02\x02\u010E" +
		"\u0110\x055\x1B\x02\u010F\u0111\x05_0\x02\u0110\u010F\x03\x02\x02\x02" +
		"\u0111\u0112\x03\x02\x02\x02\u0112\u0110\x03\x02\x02\x02\u0112\u0113\x03" +
		"\x02\x02\x02\u0113b\x03\x02\x02\x02\u0114\u0115\x07v\x02\x02\u0115\u0116" +
		"\x07t\x02\x02\u0116\u0117\x07w\x02\x02\u0117\u011E\x07g\x02\x02\u0118" +
		"\u0119\x07h\x02\x02\u0119\u011A\x07c\x02\x02\u011A\u011B\x07n\x02\x02" +
		"\u011B\u011C\x07u\x02\x02\u011C\u011E\x07g\x02\x02\u011D\u0114\x03\x02" +
		"\x02\x02\u011D\u0118\x03\x02\x02\x02\u011Ed\x03\x02\x02\x02\u011F\u0120" +
		"\x07*\x02\x02\u0120\u0121\x07+\x02\x02\u0121f\x03\x02\x02\x02\u0122\u0123" +
		"\x07%\x02\x02\u0123\u0124\x07$\x02\x02\u0124\u0125\x03\x02\x02\x02\u0125" +
		"\u0126\n\x03\x02\x02\u0126\u0127\x07$\x02\x02\u0127h\x03\x02\x02\x02\u0128" +
		"\u012C\x07$\x02\x02\u0129\u012B\n\x03\x02\x02\u012A\u0129\x03\x02\x02" +
		"\x02\u012B\u012E\x03\x02\x02\x02\u012C\u012A\x03\x02\x02\x02\u012C\u012D" +
		"\x03\x02\x02\x02\u012D\u012F\x03\x02\x02\x02\u012E\u012C\x03\x02\x02\x02" +
		"\u012F\u0130\x07$\x02\x02\u0130j\x03\x02\x02\x02\u0131\u0132\x07p\x02" +
		"\x02\u0132\u0133\x07k\x02\x02\u0133\u0134\x07n\x02\x02\u0134l\x03\x02" +
		"\x02\x02\u0135\u0136\x07<\x02\x02\u0136\u0137\x07<\x02\x02\u0137n\x03" +
		"\x02\x02\x02\u0138\u0139\x07B\x02\x02\u0139p\x03\x02\x02\x02\u013A\u013E" +
		"\t\x04\x02\x02\u013B\u013D\t\x05\x02\x02\u013C\u013B\x03\x02\x02\x02\u013D" +
		"\u0140\x03\x02\x02\x02\u013E\u013C\x03\x02\x02\x02\u013E\u013F\x03\x02" +
		"\x02\x02\u013Fr\x03\x02\x02\x02\u0140\u013E\x03\x02\x02\x02\u0141\u0143" +
		"\t\x06\x02\x02\u0142\u0141\x03\x02\x02\x02\u0143\u0144\x03\x02\x02\x02" +
		"\u0144\u0142\x03\x02\x02\x02\u0144\u0145\x03\x02\x02\x02\u0145\u0146\x03" +
		"\x02\x02\x02\u0146\u0147\b:\x02\x02\u0147t\x03\x02\x02\x02\n\x02\u0107" +
		"\u010C\u0112\u011D\u012C\u013E\u0144\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!SmlLexer.__ATN) {
			SmlLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(SmlLexer._serializedATN));
		}

		return SmlLexer.__ATN;
	}

}

