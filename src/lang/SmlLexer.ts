// Generated from ./src/lang/Sml.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class SmlLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly VAL = 3;
	public static readonly LET = 4;
	public static readonly LOCAL = 5;
	public static readonly IN = 6;
	public static readonly END = 7;
	public static readonly FUN = 8;
	public static readonly FN = 9;
	public static readonly DOUBLE_ARROW = 10;
	public static readonly REC = 11;
	public static readonly IF = 12;
	public static readonly THEN = 13;
	public static readonly ELSE = 14;
	public static readonly CASE = 15;
	public static readonly OF = 16;
	public static readonly NEXT_PATTERN = 17;
	public static readonly ASSIGN = 18;
	public static readonly L_CURLY = 19;
	public static readonly R_CURLY = 20;
	public static readonly L_BRACKET = 21;
	public static readonly R_BRACKET = 22;
	public static readonly COMMA = 23;
	public static readonly SEMI = 24;
	public static readonly COLON = 25;
	public static readonly DOT = 26;
	public static readonly EQUALS = 27;
	public static readonly NOT_EQUALS = 28;
	public static readonly LESS = 29;
	public static readonly LESS_OR_EQUALS = 30;
	public static readonly GREATER = 31;
	public static readonly GREATER_OR_EQUALS = 32;
	public static readonly NEGATE = 33;
	public static readonly POW = 34;
	public static readonly MUL = 35;
	public static readonly DIV = 36;
	public static readonly ADD = 37;
	public static readonly SUB = 38;
	public static readonly INT = 39;
	public static readonly REAL = 40;
	public static readonly BOOL = 41;
	public static readonly UNIT = 42;
	public static readonly CHAR = 43;
	public static readonly STRING = 44;
	public static readonly LIST_NIL = 45;
	public static readonly LIST_CONSTRUCT = 46;
	public static readonly LIST_CONCAT = 47;
	public static readonly IDENTIFIER = 48;
	public static readonly WHITESPACE = 49;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "VAL", "LET", "LOCAL", "IN", "END", "FUN", "FN", "DOUBLE_ARROW", 
		"REC", "IF", "THEN", "ELSE", "CASE", "OF", "NEXT_PATTERN", "ASSIGN", "L_CURLY", 
		"R_CURLY", "L_BRACKET", "R_BRACKET", "COMMA", "SEMI", "COLON", "DOT", 
		"EQUALS", "NOT_EQUALS", "LESS", "LESS_OR_EQUALS", "GREATER", "GREATER_OR_EQUALS", 
		"NEGATE", "POW", "MUL", "DIV", "ADD", "SUB", "INT", "REAL", "BOOL", "UNIT", 
		"CHAR", "STRING", "LIST_NIL", "LIST_CONSTRUCT", "LIST_CONCAT", "IDENTIFIER", 
		"WHITESPACE",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'('", "')'", "'val'", "'let'", "'local'", "'in'", "'end'", 
		"'fun'", "'fn'", "'=>'", "'rec'", "'if'", "'then'", "'else'", "'case'", 
		"'of'", "'|'", "'='", "'{'", "'}'", "'['", "']'", "','", "';'", "':'", 
		"'.'", "'=='", "'<>'", "'<'", "'<='", "'>'", "'>='", "'~'", "'^'", "'*'", 
		"'/'", "'+'", "'-'", undefined, undefined, undefined, "'()'", undefined, 
		undefined, "'nil'", "'::'", "'@'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "VAL", "LET", "LOCAL", "IN", "END", "FUN", 
		"FN", "DOUBLE_ARROW", "REC", "IF", "THEN", "ELSE", "CASE", "OF", "NEXT_PATTERN", 
		"ASSIGN", "L_CURLY", "R_CURLY", "L_BRACKET", "R_BRACKET", "COMMA", "SEMI", 
		"COLON", "DOT", "EQUALS", "NOT_EQUALS", "LESS", "LESS_OR_EQUALS", "GREATER", 
		"GREATER_OR_EQUALS", "NEGATE", "POW", "MUL", "DIV", "ADD", "SUB", "INT", 
		"REAL", "BOOL", "UNIT", "CHAR", "STRING", "LIST_NIL", "LIST_CONSTRUCT", 
		"LIST_CONCAT", "IDENTIFIER", "WHITESPACE",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(SmlLexer._LITERAL_NAMES, SmlLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return SmlLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(SmlLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Sml.g4"; }

	// @Override
	public get ruleNames(): string[] { return SmlLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return SmlLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return SmlLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return SmlLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x023\u0113\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x03\x02\x03" +
		"\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03" +
		"\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\n\x03" +
		"\n\x03\n\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03" +
		"\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03" +
		"\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03" +
		"\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03" +
		"\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03" +
		"\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1E\x03" +
		"\x1E\x03\x1F\x03\x1F\x03\x1F\x03 \x03 \x03!\x03!\x03!\x03\"\x03\"\x03" +
		"#\x03#\x03$\x03$\x03%\x03%\x03&\x03&\x03\'\x03\'\x03(\x06(\xD3\n(\r(\x0E" +
		"(\xD4\x03)\x06)\xD8\n)\r)\x0E)\xD9\x03)\x03)\x06)\xDE\n)\r)\x0E)\xDF\x03" +
		"*\x03*\x03*\x03*\x03*\x03*\x03*\x03*\x03*\x05*\xEB\n*\x03+\x03+\x03+\x03" +
		",\x03,\x03,\x03,\x03-\x03-\x07-\xF6\n-\f-\x0E-\xF9\v-\x03-\x03-\x03.\x03" +
		".\x03.\x03.\x03/\x03/\x03/\x030\x030\x031\x031\x071\u0108\n1\f1\x0E1\u010B" +
		"\v1\x032\x062\u010E\n2\r2\x0E2\u010F\x032\x032\x02\x02\x023\x03\x02\x03" +
		"\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02" +
		"\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F" +
		"\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18" +
		"/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 " +
		"?\x02!A\x02\"C\x02#E\x02$G\x02%I\x02&K\x02\'M\x02(O\x02)Q\x02*S\x02+U" +
		"\x02,W\x02-Y\x02.[\x02/]\x020_\x021a\x022c\x023\x03\x02\x07\x03\x022;" +
		"\x03\x02$$\x04\x02aac|\x07\x02))2;C\\aac|\x05\x02\v\f\x0F\x0F\"\"\x02" +
		"\u0119\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02" +
		"\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02" +
		"\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02" +
		"\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02" +
		"\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02" +
		"\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02" +
		"\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03" +
		"\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02" +
		"\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02" +
		";\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02" +
		"\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02" +
		"\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02O\x03" +
		"\x02\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02\x02\x02\x02U\x03\x02\x02" +
		"\x02\x02W\x03\x02\x02\x02\x02Y\x03\x02\x02\x02\x02[\x03\x02\x02\x02\x02" +
		"]\x03\x02\x02\x02\x02_\x03\x02\x02\x02\x02a\x03\x02\x02\x02\x02c\x03\x02" +
		"\x02\x02\x03e\x03\x02\x02\x02\x05g\x03\x02\x02\x02\x07i\x03\x02\x02\x02" +
		"\tm\x03\x02\x02\x02\vq\x03\x02\x02\x02\rw\x03\x02\x02\x02\x0Fz\x03\x02" +
		"\x02\x02\x11~\x03\x02\x02\x02\x13\x82\x03\x02\x02\x02\x15\x85\x03\x02" +
		"\x02\x02\x17\x88\x03\x02\x02\x02\x19\x8C\x03\x02\x02\x02\x1B\x8F\x03\x02" +
		"\x02\x02\x1D\x94\x03\x02\x02\x02\x1F\x99\x03\x02\x02\x02!\x9E\x03\x02" +
		"\x02\x02#\xA1\x03\x02\x02\x02%\xA3\x03\x02\x02\x02\'\xA5\x03\x02\x02\x02" +
		")\xA7\x03\x02\x02\x02+\xA9\x03\x02\x02\x02-\xAB\x03\x02\x02\x02/\xAD\x03" +
		"\x02\x02\x021\xAF\x03\x02\x02\x023\xB1\x03\x02\x02\x025\xB3\x03\x02\x02" +
		"\x027\xB5\x03\x02\x02\x029\xB8\x03\x02\x02\x02;\xBB\x03\x02\x02\x02=\xBD" +
		"\x03\x02\x02\x02?\xC0\x03\x02\x02\x02A\xC2\x03\x02\x02\x02C\xC5\x03\x02" +
		"\x02\x02E\xC7\x03\x02\x02\x02G\xC9\x03\x02\x02\x02I\xCB\x03\x02\x02\x02" +
		"K\xCD\x03\x02\x02\x02M\xCF\x03\x02\x02\x02O\xD2\x03\x02\x02\x02Q\xD7\x03" +
		"\x02\x02\x02S\xEA\x03\x02\x02\x02U\xEC\x03\x02\x02\x02W\xEF\x03\x02\x02" +
		"\x02Y\xF3\x03\x02\x02\x02[\xFC\x03\x02\x02\x02]\u0100\x03\x02\x02\x02" +
		"_\u0103\x03\x02\x02\x02a\u0105\x03\x02\x02\x02c\u010D\x03\x02\x02\x02" +
		"ef\x07*\x02\x02f\x04\x03\x02\x02\x02gh\x07+\x02\x02h\x06\x03\x02\x02\x02" +
		"ij\x07x\x02\x02jk\x07c\x02\x02kl\x07n\x02\x02l\b\x03\x02\x02\x02mn\x07" +
		"n\x02\x02no\x07g\x02\x02op\x07v\x02\x02p\n\x03\x02\x02\x02qr\x07n\x02" +
		"\x02rs\x07q\x02\x02st\x07e\x02\x02tu\x07c\x02\x02uv\x07n\x02\x02v\f\x03" +
		"\x02\x02\x02wx\x07k\x02\x02xy\x07p\x02\x02y\x0E\x03\x02\x02\x02z{\x07" +
		"g\x02\x02{|\x07p\x02\x02|}\x07f\x02\x02}\x10\x03\x02\x02\x02~\x7F\x07" +
		"h\x02\x02\x7F\x80\x07w\x02\x02\x80\x81\x07p\x02\x02\x81\x12\x03\x02\x02" +
		"\x02\x82\x83\x07h\x02\x02\x83\x84\x07p\x02\x02\x84\x14\x03\x02\x02\x02" +
		"\x85\x86\x07?\x02\x02\x86\x87\x07@\x02\x02\x87\x16\x03\x02\x02\x02\x88" +
		"\x89\x07t\x02\x02\x89\x8A\x07g\x02\x02\x8A\x8B\x07e\x02\x02\x8B\x18\x03" +
		"\x02\x02\x02\x8C\x8D\x07k\x02\x02\x8D\x8E\x07h\x02\x02\x8E\x1A\x03\x02" +
		"\x02\x02\x8F\x90\x07v\x02\x02\x90\x91\x07j\x02\x02\x91\x92\x07g\x02\x02" +
		"\x92\x93\x07p\x02\x02\x93\x1C\x03\x02\x02\x02\x94\x95\x07g\x02\x02\x95" +
		"\x96\x07n\x02\x02\x96\x97\x07u\x02\x02\x97\x98\x07g\x02\x02\x98\x1E\x03" +
		"\x02\x02\x02\x99\x9A\x07e\x02\x02\x9A\x9B\x07c\x02\x02\x9B\x9C\x07u\x02" +
		"\x02\x9C\x9D\x07g\x02\x02\x9D \x03\x02\x02\x02\x9E\x9F\x07q\x02\x02\x9F" +
		"\xA0\x07h\x02\x02\xA0\"\x03\x02\x02\x02\xA1\xA2\x07~\x02\x02\xA2$\x03" +
		"\x02\x02\x02\xA3\xA4\x07?\x02\x02\xA4&\x03\x02\x02\x02\xA5\xA6\x07}\x02" +
		"\x02\xA6(\x03\x02\x02\x02\xA7\xA8\x07\x7F\x02\x02\xA8*\x03\x02\x02\x02" +
		"\xA9\xAA\x07]\x02\x02\xAA,\x03\x02\x02\x02\xAB\xAC\x07_\x02\x02\xAC.\x03" +
		"\x02\x02\x02\xAD\xAE\x07.\x02\x02\xAE0\x03\x02\x02\x02\xAF\xB0\x07=\x02" +
		"\x02\xB02\x03\x02\x02\x02\xB1\xB2\x07<\x02\x02\xB24\x03\x02\x02\x02\xB3" +
		"\xB4\x070\x02\x02\xB46\x03\x02\x02\x02\xB5\xB6\x07?\x02\x02\xB6\xB7\x07" +
		"?\x02\x02\xB78\x03\x02\x02\x02\xB8\xB9\x07>\x02\x02\xB9\xBA\x07@\x02\x02" +
		"\xBA:\x03\x02\x02\x02\xBB\xBC\x07>\x02\x02\xBC<\x03\x02\x02\x02\xBD\xBE" +
		"\x07>\x02\x02\xBE\xBF\x07?\x02\x02\xBF>\x03\x02\x02\x02\xC0\xC1\x07@\x02" +
		"\x02\xC1@\x03\x02\x02\x02\xC2\xC3\x07@\x02\x02\xC3\xC4\x07?\x02\x02\xC4" +
		"B\x03\x02\x02\x02\xC5\xC6\x07\x80\x02\x02\xC6D\x03\x02\x02\x02\xC7\xC8" +
		"\x07`\x02\x02\xC8F\x03\x02\x02\x02\xC9\xCA\x07,\x02\x02\xCAH\x03\x02\x02" +
		"\x02\xCB\xCC\x071\x02\x02\xCCJ\x03\x02\x02\x02\xCD\xCE\x07-\x02\x02\xCE" +
		"L\x03\x02\x02\x02\xCF\xD0\x07/\x02\x02\xD0N\x03\x02\x02\x02\xD1\xD3\t" +
		"\x02\x02\x02\xD2\xD1\x03\x02\x02\x02\xD3\xD4\x03\x02\x02\x02\xD4\xD2\x03" +
		"\x02\x02\x02\xD4\xD5\x03\x02\x02\x02\xD5P\x03\x02\x02\x02\xD6\xD8\x05" +
		"O(\x02\xD7\xD6\x03\x02\x02\x02\xD8\xD9\x03\x02\x02\x02\xD9\xD7\x03\x02" +
		"\x02\x02\xD9\xDA\x03\x02\x02\x02\xDA\xDB\x03\x02\x02\x02\xDB\xDD\x055" +
		"\x1B\x02\xDC\xDE\x05O(\x02\xDD\xDC\x03\x02\x02\x02\xDE\xDF\x03\x02\x02" +
		"\x02\xDF\xDD\x03\x02\x02\x02\xDF\xE0\x03\x02\x02\x02\xE0R\x03\x02\x02" +
		"\x02\xE1\xE2\x07v\x02\x02\xE2\xE3\x07t\x02\x02\xE3\xE4\x07w\x02\x02\xE4" +
		"\xEB\x07g\x02\x02\xE5\xE6\x07h\x02\x02\xE6\xE7\x07c\x02\x02\xE7\xE8\x07" +
		"n\x02\x02\xE8\xE9\x07u\x02\x02\xE9\xEB\x07g\x02\x02\xEA\xE1\x03\x02\x02" +
		"\x02\xEA\xE5\x03\x02\x02\x02\xEBT\x03\x02\x02\x02\xEC\xED\x07*\x02\x02" +
		"\xED\xEE\x07+\x02\x02\xEEV\x03\x02\x02\x02\xEF\xF0\x07$\x02\x02\xF0\xF1" +
		"\n\x03\x02\x02\xF1\xF2\x07$\x02\x02\xF2X\x03\x02\x02\x02\xF3\xF7\x07$" +
		"\x02\x02\xF4\xF6\n\x03\x02\x02\xF5\xF4\x03\x02\x02\x02\xF6\xF9\x03\x02" +
		"\x02\x02\xF7\xF5\x03\x02\x02\x02\xF7\xF8\x03\x02\x02\x02\xF8\xFA\x03\x02" +
		"\x02\x02\xF9\xF7\x03\x02\x02\x02\xFA\xFB\x07$\x02\x02\xFBZ\x03\x02\x02" +
		"\x02\xFC\xFD\x07p\x02\x02\xFD\xFE\x07k\x02\x02\xFE\xFF\x07n\x02\x02\xFF" +
		"\\\x03\x02\x02\x02\u0100\u0101\x07<\x02\x02\u0101\u0102\x07<\x02\x02\u0102" +
		"^\x03\x02\x02\x02\u0103\u0104\x07B\x02\x02\u0104`\x03\x02\x02\x02\u0105" +
		"\u0109\t\x04\x02\x02\u0106\u0108\t\x05\x02\x02\u0107\u0106\x03\x02\x02" +
		"\x02\u0108\u010B\x03\x02\x02\x02\u0109\u0107\x03\x02\x02\x02\u0109\u010A" +
		"\x03\x02\x02\x02\u010Ab\x03\x02\x02\x02\u010B\u0109\x03\x02\x02\x02\u010C" +
		"\u010E\t\x06\x02\x02\u010D\u010C\x03\x02\x02\x02\u010E\u010F\x03\x02\x02" +
		"\x02\u010F\u010D\x03\x02\x02\x02\u010F\u0110\x03\x02\x02\x02\u0110\u0111" +
		"\x03\x02\x02\x02\u0111\u0112\b2\x02\x02\u0112d\x03\x02\x02\x02\n\x02\xD4" +
		"\xD9\xDF\xEA\xF7\u0109\u010F\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!SmlLexer.__ATN) {
			SmlLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(SmlLexer._serializedATN));
		}

		return SmlLexer.__ATN;
	}

}

